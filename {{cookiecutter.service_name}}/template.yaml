AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {{cookiecutter.service_name}}

  {{cookiecutter.service_description}}

Parameters:
  Environment:
    Type: String
    Description: "Name of deployment environment"

  SiteIndexDoc:
    Type: String
    Description: "Index document name"
    Default: "index.html"

  SiteErrorDoc:
    Type: String
    Description: "Error document name"
    Default: "error.html"

  SiteFqdn:
    Type: String
    Description: "Site name (FQDN)"
    Default: {{ cookiecutter.site_fqdn }}

  SiteDomainName:
    Type: String
    Description: "Site domain"
    Default: {{ cookiecutter.site_domain }}

  # FIXME: DNS is probably better but I need to figure out that workflow.
  CertValidationMethod:
    Type: String
    Description: "Validation method for ACM cert."
    AllowedValues:
      - "DNS"
      - "EMAIL"
    Default: "EMAIL"


{%- if cookiecutter.use_cloudfront != "yes" %}
Mappings:
  RegionMap:
    us-east-1:
      S3HostedZoneId: "Z3AQBSTGFYJSTF"
      S3DomainName: "s3-website-us-east-1.amazonaws.com"
    us-east-2:
      S3HostedZoneId: "Z2O1EMRO9K5GLX"
      S3DomainName: "s3-website-us-east-2.amazonaws.com"
    us-west-1:
      S3HostedZoneId: "Z2F56UZL2M1ACD"
      S3DomainName: "s3-website-us-west-1.amazonaws.com"
    us-west-2:
      S3HostedZoneId: "Z3BJ6K6RIION7M"
      S3DomainName: "s3-website-us-west-2.amazonaws.com"
{%- endif %}


Resources:
  ## Specifying the S3 Bucket
  StaticSite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
{%- if cookiecutter.use_cloudfront == "yes" %}
      BucketName:
        Fn::Join:
          - "-"
          - - Fn::Join:
                - "-"
                - Fn::Split:
                    - "."
                    - Ref: SiteFqdn
            - Ref: AWS::Region
            - Ref: AWS::AccountId
{%- else %}
      BucketName:
        Ref: SiteFqdn
{%- endif %}
      WebsiteConfiguration:
        IndexDocument:
          Ref: SiteIndexDoc
        ErrorDocument:
          Ref: SiteErrorDoc

  StaticSiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticSite
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: StaticSite
                  - "/*"

{%- if cookiecutter.use_cloudfront == "yes" %}
  SiteCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: SiteFqdn
      ValidationMethod:
        Ref: CertValidationMethod
      DomainValidationOptions:
        - DomainName:
            Ref: SiteFqdn
          ValidationDomain:
            Ref: SiteFqdn

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              Fn::GetAtt:
                - StaticSite
                - DomainName
            # It isn't necessary to sue this value; but we need the same
            # value for DefaultCacheBehavior.TargetOriginId
            Id:
              Ref: StaticSite
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: 'true'
        Aliases:
          - Ref: SiteFqdn
        DefaultRootObject:
          Ref: SiteIndexDoc
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId:
            Ref: StaticSite
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn:
            Ref: SiteCert
          SslSupportMethod: sni-only
        ## Uncomment the following section in case you want to enable logging for CloudFront requests
        # Logging:
        #  IncludeCookies: 'false'
        #   Bucket: mylogs.s3.amazonaws.com
        #   Prefix: myprefix
    DependsOn:
      - StaticSiteS3BucketPolicy
{%- endif %}


{% if cookiecutter.use_dns == "yes" %}
  # FIXME: Do we need trailing '.' on site name?
  DnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneName:
        Fn::Sub: "${SiteDomainName}."
{%- if cookiecutter.use_cloudfront == "yes" %}
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"
      Name:
        Ref: SiteFqdn
{%- else %}
      AliasTarget:
        DNSName:
          Fn::FindInMap:
            - RegionMap
            - Ref: AWS::Region
            - S3DomainName
        HostedZoneId:
          Fn::FindInMap:
            - RegionMap
            - Ref: AWS::Region
            - S3HostedZoneId
      Name:
        Ref: StaticSite
{%- endif %}
      Type: 'A'
{%- endif %}

Outputs:
{% if cookiecutter.use_dns == "yes" %}
  AppUrl:
    Description: "Application URL"
{%- if cookiecutter.use_cloudfront == "yes" %}
{%- if cookiecutter.use_dns == "yes" %}
    Value:
      Fn::Sub: "https://${SiteFqdn}"
{%- else %}
      Fn::Join:
        - ""
        - - "https://"
          - Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
{%- endif %}
{%- else %}
    Value:
      Fn::Sub: "http://${StaticSite}"
{%- endif %}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AppUrl"
{%- endif %}

  StaticSiteS3BucketName:
    Value:
      Ref: StaticSite

  StaticSiteS3BucketWebsiteURL:
    Value:
      Fn::GetAtt:
        - StaticSite
        - WebsiteURL

